---
title: "homework-03"
author: "Rebecca Martinez"
format: html
---

GitHub repository: https://rebeccalmartinez.github.io/ENVS-193DS_homework-03/


```{r setup}

#| label: setup
#| include: false
#| message: false

# Loading packages
library(tidyverse)
library(here)
library(flextable)
library(janitor)

service_data <- read_csv(here("data", "service_data.csv"))

```


## Part 2. Problems

### Problem 1. Personal data 

#### a. Data summarizing 

I could count the number of service calls where help was or wasnâ€™t needed, grouped by whether the light was working or broken. Comparing these groups is informative because a broken light might influence whether guests mistakenly request help.

#### b. Visualizations

```{r data cleaning}

# Clean and standardize help and working columns

clean_service_data <- service_data |>  # using service_data set
  mutate(
    # Convert values to uppercase to avoid issues with lowercase na
    help = toupper(help),
    working = toupper(working),
    # Convert the uppercase text to logical TRUE/FALSE values
     help = as.logical(help), 
    working = as.logical(working))


```

```{r stacked bar chart}

# Create a stacked bar chart to compare how often help was or wasn't needed
# across two conditions: working lights vs broken lights
ggplot(clean_service_data, aes(x = working, fill = help)) +
  
  # Use stacked bars with slimmer width and black borders for clarity
  geom_bar(position = "stack", width = 0.6, color = "black") +
  # Add counts inside each bar segment
  geom_text(
  # Count the number of rows per group
    stat = "count",
  # Display the count as text
    aes(label = ..count..),
  # Position in each stacked segment
    position = position_stack(vjust = 0.5),
  # text color and size 
   color = "black",
    size = 4
  ) +
  # Assign color to and titles to stacked bars
  scale_fill_manual(
    values = c("TRUE" = "forestgreen", "FALSE" = "red"),
    labels = c("Help Not Needed", "Help Needed")
  ) +
  
  # Replace raw logical values with clearer labels for x-axis categories
  scale_x_discrete(labels = c("TRUE" = "Working", "FALSE" = "Broken")) +
  
  # Force y-axis to start at 0 
  scale_y_continuous(limits = c(0, 50), expand = c(0, 0)) +
  
  # Set axis labels and title
  labs(
    x = "Light Condition",                   
    y = "Number of Service Calls",
    title = "Service Calls by Light Condition and Help Status"
  ) +
  
  # Apply a minimal, clean theme and customize layout
  theme_classic() +
  theme(
  # Center and bold the title
    plot.title = element_text(face = "bold", hjust = 0.5, size = 16), 
  # Bold axis labels
    axis.title = element_text(face = "bold"),                          
  # Move legend to top-right
    legend.position = c(0.95, 0.95),                                   
  # Align legend corner
    legend.justification = c("right", "top"),                          
  # Remove title
    legend.title = element_blank()                                     
  )


```

